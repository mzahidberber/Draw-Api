// <auto-generated />
using System;
using Draw.DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Draw.DataAccess.Migrations
{
    [DbContext(typeof(DrawContext))]
    partial class DrawContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Draw.Entities.Concrete.DrawBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Draws");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "c1",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        },
                        new
                        {
                            Id = 2,
                            Name = "c2",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        },
                        new
                        {
                            Id = 3,
                            Name = "c1",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7cb"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.DrawCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DrawBoxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DrawBoxId");

                    b.ToTable("DrawCommand");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("PenId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayerId");

                    b.HasIndex("PenId");

                    b.HasIndex("TypeId");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LayerId = 1,
                            PenId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            LayerId = 1,
                            PenId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            LayerId = 1,
                            PenId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            LayerId = 1,
                            PenId = 1,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            LayerId = 1,
                            PenId = 1,
                            TypeId = 4
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.ElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ElementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "line"
                        },
                        new
                        {
                            Id = 2,
                            Name = "circle"
                        },
                        new
                        {
                            Id = 3,
                            Name = "rectangle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "arc"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ellips"
                        },
                        new
                        {
                            Id = 6,
                            Name = "spline"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DrawBoxId")
                        .HasColumnType("int");

                    b.Property<bool>("Lock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PenId")
                        .HasColumnType("int");

                    b.Property<float>("Thickness")
                        .HasPrecision(3, 1)
                        .HasColumnType("float");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DrawBoxId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PenId");

                    b.ToTable("Layers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrawBoxId = 1,
                            Lock = false,
                            Name = "0",
                            PenId = 1,
                            Thickness = 1f,
                            Visibility = false
                        },
                        new
                        {
                            Id = 2,
                            DrawBoxId = 1,
                            Lock = false,
                            Name = "a",
                            PenId = 2,
                            Thickness = 1f,
                            Visibility = false
                        },
                        new
                        {
                            Id = 3,
                            DrawBoxId = 1,
                            Lock = false,
                            Name = "b",
                            PenId = 1,
                            Thickness = 1f,
                            Visibility = false
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Pen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Blue")
                        .HasColumnType("int");

                    b.Property<int>("Green")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PenStyleId")
                        .HasColumnType("int");

                    b.Property<int>("Red")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PenStyleId");

                    b.HasIndex("UserId");

                    b.ToTable("Pens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blue = 10,
                            Green = 10,
                            Name = "pen1",
                            PenStyleId = 1,
                            Red = 10,
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        },
                        new
                        {
                            Id = 2,
                            Blue = 10,
                            Green = 10,
                            Name = "pen2",
                            PenStyleId = 2,
                            Red = 10,
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.PenStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PenStyles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "solid"
                        },
                        new
                        {
                            Id = 2,
                            Name = "dot"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasPrecision(10, 5)
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasPrecision(10, 5)
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("PointTypeId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ElementId = 1,
                            PointTypeId = 1,
                            X = 10.0,
                            Y = 8.0
                        },
                        new
                        {
                            Id = 2,
                            ElementId = 1,
                            PointTypeId = 1,
                            X = 15.0,
                            Y = 20.0
                        },
                        new
                        {
                            Id = 3,
                            ElementId = 2,
                            PointTypeId = 1,
                            X = 5.0,
                            Y = 10.0
                        },
                        new
                        {
                            Id = 4,
                            ElementId = 2,
                            PointTypeId = 1,
                            X = 9.0,
                            Y = 20.0
                        },
                        new
                        {
                            Id = 5,
                            ElementId = 3,
                            PointTypeId = 1,
                            X = 7.0,
                            Y = 3.0
                        },
                        new
                        {
                            Id = 6,
                            ElementId = 3,
                            PointTypeId = 1,
                            X = 2.0,
                            Y = 1.0
                        },
                        new
                        {
                            Id = 7,
                            ElementId = 4,
                            PointTypeId = 2,
                            X = 0.0,
                            Y = 0.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.PointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PointTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "end"
                        },
                        new
                        {
                            Id = 2,
                            Name = "center"
                        },
                        new
                        {
                            Id = 3,
                            Name = "middle"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Radius", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasPrecision(8, 4)
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("Radiuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ElementId = 4,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 2,
                            ElementId = 4,
                            Value = 15.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.SSAngle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Value")
                        .HasPrecision(8, 4)
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("SSAngles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ElementId = 1,
                            Type = "start",
                            Value = 0.0
                        },
                        new
                        {
                            Id = 2,
                            ElementId = 1,
                            Type = "stop",
                            Value = 30.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7ca",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "ceeb780b-f3a5-4c76-9d2b-402b13eb4899",
                            Email = "zahid11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "db4bc67f-528a-4520-a81e-cb35044e76ca",
                            TwoFactorEnabled = false,
                            UserName = "zahid"
                        },
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7cb",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "9ed1353f-a4ee-44c4-ad8f-6d6edd7404d3",
                            Email = "ali@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7ef43a44-63e4-49c5-b6a5-f163c9f09ea5",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7cc",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "d2a9ae78-7530-49cc-b2a9-32b94e1cb5ba",
                            Email = "zeynep@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "387b2563-f6c5-4621-8a7e-42c95174e056",
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe108175-059b-4e1d-918f-87fc6917c08b",
                            ConcurrencyStamp = "e3451ba0-72c5-48e3-8e9e-f73a2cb7e587",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40bf6022-ed61-4c00-8b91-4123315cec3d",
                            ConcurrencyStamp = "db256b4b-b628-43ae-964e-ef1069799023",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "e342925b-6860-4c6b-80c0-9c4d23b3e838",
                            ConcurrencyStamp = "4af84c8d-d9ae-482b-9c30-49d962991bc8",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Draw.Entities.Concrete.DrawBox", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.User", "User")
                        .WithMany("DrawBoxs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.DrawCommand", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.DrawBox", "DrawBox")
                        .WithMany("DrawCommands")
                        .HasForeignKey("DrawBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawBox");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Element", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Layer", "Layer")
                        .WithMany("Elements")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Pen", "Pen")
                        .WithMany("Elements")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.ElementType", "Type")
                        .WithMany("Elements")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");

                    b.Navigation("Pen");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Layer", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.DrawBox", "DrawBox")
                        .WithMany("Layers")
                        .HasForeignKey("DrawBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Pen", "Pen")
                        .WithMany("Layers")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawBox");

                    b.Navigation("Pen");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Pen", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.PenStyle", "PenStyle")
                        .WithMany("Pens")
                        .HasForeignKey("PenStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.User", "User")
                        .WithMany("Pens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PenStyle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Point", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Element", "Element")
                        .WithMany("Points")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.PointType", "PointType")
                        .WithMany("Points")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Radius", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Element", "Element")
                        .WithMany("Radiuses")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.SSAngle", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Element", "Element")
                        .WithMany("SSAngles")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Draw.Entities.Concrete.DrawBox", b =>
                {
                    b.Navigation("DrawCommands");

                    b.Navigation("Layers");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Element", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Radiuses");

                    b.Navigation("SSAngles");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.ElementType", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Layer", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Pen", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Layers");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.PenStyle", b =>
                {
                    b.Navigation("Pens");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.PointType", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.User", b =>
                {
                    b.Navigation("DrawBoxs");

                    b.Navigation("Pens");
                });
#pragma warning restore 612, 618
        }
    }
}
