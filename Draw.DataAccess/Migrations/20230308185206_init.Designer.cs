// <auto-generated />
using System;
using Draw.DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Draw.DataAccess.Migrations
{
    [DbContext(typeof(DrawContext))]
    [Migration("20230308185206_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Draw.Entities.Concrete.Commands.DrawCommand", b =>
                {
                    b.Property<int>("DrawCommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DrawCommandDrawBoxId")
                        .HasColumnType("int");

                    b.Property<string>("DrawCommandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DrawCommandId");

                    b.HasIndex("DrawCommandDrawBoxId");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            DrawCommandId = 1,
                            DrawCommandDrawBoxId = 1,
                            DrawCommandName = "dc1"
                        },
                        new
                        {
                            DrawCommandId = 2,
                            DrawCommandDrawBoxId = 1,
                            DrawCommandName = "dc2"
                        },
                        new
                        {
                            DrawCommandId = 3,
                            DrawCommandDrawBoxId = 1,
                            DrawCommandName = "dc3"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Draw.DrawBox", b =>
                {
                    b.Property<int>("DrawBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DrawName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DrawBoxId");

                    b.HasIndex("UserId");

                    b.ToTable("Draws");

                    b.HasData(
                        new
                        {
                            DrawBoxId = 1,
                            DrawName = "c1",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        },
                        new
                        {
                            DrawBoxId = 2,
                            DrawName = "c2",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7ca"
                        },
                        new
                        {
                            DrawBoxId = 3,
                            DrawName = "c1",
                            UserId = "b21972e1-742f-4fa7-be46-1189d9cab7cb"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Element", b =>
                {
                    b.Property<int>("ElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<int>("PenId")
                        .HasColumnType("int");

                    b.HasKey("ElementId");

                    b.HasIndex("ElementTypeId");

                    b.HasIndex("LayerId");

                    b.HasIndex("PenId");

                    b.ToTable("Elements");

                    b.HasData(
                        new
                        {
                            ElementId = 1,
                            ElementTypeId = 1,
                            LayerId = 1,
                            PenId = 1
                        },
                        new
                        {
                            ElementId = 2,
                            ElementTypeId = 1,
                            LayerId = 1,
                            PenId = 1
                        },
                        new
                        {
                            ElementId = 3,
                            ElementTypeId = 1,
                            LayerId = 1,
                            PenId = 1
                        },
                        new
                        {
                            ElementId = 4,
                            ElementTypeId = 5,
                            LayerId = 1,
                            PenId = 1
                        },
                        new
                        {
                            ElementId = 5,
                            ElementTypeId = 4,
                            LayerId = 1,
                            PenId = 1
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Point", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("PointTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PointX")
                        .HasColumnType("double");

                    b.Property<double>("PointY")
                        .HasColumnType("double");

                    b.HasKey("PointId");

                    b.HasIndex("ElementId");

                    b.HasIndex("PointTypeId");

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            PointId = 1,
                            ElementId = 1,
                            PointTypeId = 1,
                            PointX = 10.0,
                            PointY = 8.0
                        },
                        new
                        {
                            PointId = 2,
                            ElementId = 1,
                            PointTypeId = 1,
                            PointX = 15.0,
                            PointY = 20.0
                        },
                        new
                        {
                            PointId = 3,
                            ElementId = 2,
                            PointTypeId = 1,
                            PointX = 5.0,
                            PointY = 10.0
                        },
                        new
                        {
                            PointId = 4,
                            ElementId = 2,
                            PointTypeId = 1,
                            PointX = 9.0,
                            PointY = 20.0
                        },
                        new
                        {
                            PointId = 5,
                            ElementId = 3,
                            PointTypeId = 1,
                            PointX = 7.0,
                            PointY = 3.0
                        },
                        new
                        {
                            PointId = 6,
                            ElementId = 3,
                            PointTypeId = 1,
                            PointX = 2.0,
                            PointY = 1.0
                        },
                        new
                        {
                            PointId = 7,
                            ElementId = 4,
                            PointTypeId = 2,
                            PointX = 0.0,
                            PointY = 0.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Radius", b =>
                {
                    b.Property<int>("RadiusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RadiusElementId")
                        .HasColumnType("int");

                    b.Property<double>("RadiusValue")
                        .HasColumnType("double");

                    b.HasKey("RadiusId");

                    b.HasIndex("RadiusElementId");

                    b.ToTable("Radiuses");

                    b.HasData(
                        new
                        {
                            RadiusId = 1,
                            RadiusElementId = 4,
                            RadiusValue = 10.0
                        },
                        new
                        {
                            RadiusId = 2,
                            RadiusElementId = 4,
                            RadiusValue = 15.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.SSAngle", b =>
                {
                    b.Property<int>("SSAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SSAngleElementId")
                        .HasColumnType("int");

                    b.Property<string>("SSAngleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SSAngleValue")
                        .HasColumnType("double");

                    b.HasKey("SSAngleId");

                    b.HasIndex("SSAngleElementId");

                    b.ToTable("SSAngles");

                    b.HasData(
                        new
                        {
                            SSAngleId = 1,
                            SSAngleElementId = 1,
                            SSAngleType = "start",
                            SSAngleValue = 0.0
                        },
                        new
                        {
                            SSAngleId = 2,
                            SSAngleElementId = 1,
                            SSAngleType = "stop",
                            SSAngleValue = 30.0
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColorBlue")
                        .HasColumnType("int");

                    b.Property<int>("ColorGreen")
                        .HasColumnType("int");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ColorRed")
                        .HasColumnType("int");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorBlue = 255,
                            ColorGreen = 255,
                            ColorName = "white",
                            ColorRed = 255
                        },
                        new
                        {
                            ColorId = 2,
                            ColorBlue = 0,
                            ColorGreen = 0,
                            ColorName = "red",
                            ColorRed = 211
                        },
                        new
                        {
                            ColorId = 3,
                            ColorBlue = 127,
                            ColorGreen = 0,
                            ColorName = "orange",
                            ColorRed = 255
                        },
                        new
                        {
                            ColorId = 4,
                            ColorBlue = 184,
                            ColorGreen = 255,
                            ColorName = "blue",
                            ColorRed = 99
                        },
                        new
                        {
                            ColorId = 5,
                            ColorBlue = 0,
                            ColorGreen = 0,
                            ColorName = "black",
                            ColorRed = 0
                        },
                        new
                        {
                            ColorId = 6,
                            ColorBlue = 153,
                            ColorGreen = 153,
                            ColorName = "gray",
                            ColorRed = 153
                        },
                        new
                        {
                            ColorId = 7,
                            ColorBlue = 128,
                            ColorGreen = 77,
                            ColorName = "green",
                            ColorRed = 74
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.ElementType", b =>
                {
                    b.Property<int>("ElementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ElementTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ElementTypeId");

                    b.ToTable("ElementTypes");

                    b.HasData(
                        new
                        {
                            ElementTypeId = 1,
                            ElementTypeName = "line"
                        },
                        new
                        {
                            ElementTypeId = 2,
                            ElementTypeName = "circle"
                        },
                        new
                        {
                            ElementTypeId = 3,
                            ElementTypeName = "rectangle"
                        },
                        new
                        {
                            ElementTypeId = 4,
                            ElementTypeName = "arc"
                        },
                        new
                        {
                            ElementTypeId = 5,
                            ElementTypeName = "ellips"
                        },
                        new
                        {
                            ElementTypeId = 6,
                            ElementTypeName = "spline"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Layer", b =>
                {
                    b.Property<int>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DrawBoxId")
                        .HasColumnType("int");

                    b.Property<bool>("LayerLock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LayerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<float>("LayerThickness")
                        .HasColumnType("float");

                    b.Property<bool>("LayerVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PenId")
                        .HasColumnType("int");

                    b.HasKey("LayerId");

                    b.HasIndex("DrawBoxId");

                    b.HasIndex("LayerName")
                        .IsUnique();

                    b.HasIndex("PenId");

                    b.ToTable("Layers");

                    b.HasData(
                        new
                        {
                            LayerId = 1,
                            DrawBoxId = 1,
                            LayerLock = false,
                            LayerName = "0",
                            LayerThickness = 1f,
                            LayerVisibility = false,
                            PenId = 1
                        },
                        new
                        {
                            LayerId = 2,
                            DrawBoxId = 1,
                            LayerLock = false,
                            LayerName = "a",
                            LayerThickness = 1f,
                            LayerVisibility = false,
                            PenId = 2
                        },
                        new
                        {
                            LayerId = 3,
                            DrawBoxId = 1,
                            LayerLock = false,
                            LayerName = "b",
                            LayerThickness = 1f,
                            LayerVisibility = false,
                            PenId = 1
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Pen", b =>
                {
                    b.Property<int>("PenId")
                        .HasColumnType("int");

                    b.Property<int>("PenColorId")
                        .HasColumnType("int");

                    b.Property<string>("PenName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PenStyleId")
                        .HasColumnType("int");

                    b.HasKey("PenId");

                    b.ToTable("Pens");

                    b.HasData(
                        new
                        {
                            PenId = 1,
                            PenColorId = 1,
                            PenName = "pen1",
                            PenStyleId = 1
                        },
                        new
                        {
                            PenId = 2,
                            PenColorId = 2,
                            PenName = "pen2",
                            PenStyleId = 2
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.PenStyle", b =>
                {
                    b.Property<int>("PenStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PenStyleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PenStyleId");

                    b.ToTable("PenStyles");

                    b.HasData(
                        new
                        {
                            PenStyleId = 1,
                            PenStyleName = "solid"
                        },
                        new
                        {
                            PenStyleId = 2,
                            PenStyleName = "dot"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.PointType", b =>
                {
                    b.Property<int>("PointTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PointTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PointTypeId");

                    b.ToTable("PointTypes");

                    b.HasData(
                        new
                        {
                            PointTypeId = 1,
                            PointTypeName = "end"
                        },
                        new
                        {
                            PointTypeId = 2,
                            PointTypeName = "center"
                        },
                        new
                        {
                            PointTypeId = 3,
                            PointTypeName = "middle"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7ca",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "5f224274-319f-403e-b440-036848f36ffc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "af2c18e0-17c3-4de8-828c-eeff4f0e2e7a",
                            TwoFactorEnabled = false,
                            UserName = "zahid"
                        },
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7cb",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "164c56a8-64d1-43c0-b196-62190d931839",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "63919bf6-6ee9-4016-84b3-c8bf9ee1a497",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = "b21972e1-742f-4fa7-be46-1189d9cab7cc",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "dac9f1cd-0445-46ca-aba6-4f39ec1f65b6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "513",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "af1e497a-953e-4ebf-80e8-afe23437c152",
                            TwoFactorEnabled = false,
                            UserName = "zeynep"
                        });
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Users.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Users.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6881c656-d38d-42ba-be2c-f51b65fe8fec",
                            ConcurrencyStamp = "c4aa477b-50b6-40ac-bcfa-06c0b34b70b8",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4bf83e9d-0954-4de5-a2f0-4c72d1960d1b",
                            ConcurrencyStamp = "8de2157f-635c-493d-8468-be40ef6795e0",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "15936a03-f075-429c-9e6c-107710ea500e",
                            ConcurrencyStamp = "e671a9ba-15d0-4937-bf04-ff5c4b7fc131",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Commands.DrawCommand", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Draw.DrawBox", "DrawCommandDrawBox")
                        .WithMany("DrawCommands")
                        .HasForeignKey("DrawCommandDrawBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawCommandDrawBox");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Draw.DrawBox", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.User", "User")
                        .WithMany("DrawBoxs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Element", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Helpers.ElementType", "ElementType")
                        .WithMany("Elements")
                        .HasForeignKey("ElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Helpers.Layer", "Layer")
                        .WithMany("Elements")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Helpers.Pen", "Pen")
                        .WithMany("Elements")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementType");

                    b.Navigation("Layer");

                    b.Navigation("Pen");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Point", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Elements.Element", "Element")
                        .WithMany("Points")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Helpers.PointType", "PointType")
                        .WithMany("PointTypePoints")
                        .HasForeignKey("PointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("PointType");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Radius", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Elements.Element", "RadiusElement")
                        .WithMany("Radiuses")
                        .HasForeignKey("RadiusElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadiusElement");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.SSAngle", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Elements.Element", "SSAngleElement")
                        .WithMany("SSAngles")
                        .HasForeignKey("SSAngleElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSAngleElement");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Layer", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Draw.DrawBox", "DrawBox")
                        .WithMany("Layers")
                        .HasForeignKey("DrawBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Helpers.Pen", "Pen")
                        .WithMany("Layers")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawBox");

                    b.Navigation("Pen");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Pen", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Helpers.Color", "PenColor")
                        .WithMany("Pens")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Helpers.PenStyle", "PenStyle")
                        .WithMany("Pens")
                        .HasForeignKey("PenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PenColor");

                    b.Navigation("PenStyle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Draw.Entities.Concrete.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Draw.Entities.Concrete.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Draw.DrawBox", b =>
                {
                    b.Navigation("DrawCommands");

                    b.Navigation("Layers");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Elements.Element", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Radiuses");

                    b.Navigation("SSAngles");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Color", b =>
                {
                    b.Navigation("Pens");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.ElementType", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Layer", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.Pen", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Layers");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.PenStyle", b =>
                {
                    b.Navigation("Pens");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Helpers.PointType", b =>
                {
                    b.Navigation("PointTypePoints");
                });

            modelBuilder.Entity("Draw.Entities.Concrete.Users.User", b =>
                {
                    b.Navigation("DrawBoxs");
                });
#pragma warning restore 612, 618
        }
    }
}
